"""Pydantic models to describe WebSocket messages."""
from datetime import datetime
from typing import List

from pydantic import BaseModel


class Header(BaseModel):
    """
    Model to describe message headers.

    Message headers contain generic information shared by all websocket messages. Also, importantly
    the `name` key, which corresponds to the type of payload the message contains.
    """

    name: str
    timestamp: datetime

    class Config:
        """
        Config options for the Header model.

        Basically just used to serialize datetime values into ISO8601 strings.

        """

        json_encoders = {datetime: lambda value: value.isoformat()}


class PayloadField(BaseModel):
    """
    Model to describe a single field in a message payload.

    These will most likely be generated by DataStream callbacks. Message payloads can consist of
    multiple PayloadFields
    """

    name: str
    value: int | float
    units: str | None


class FieldConfiguration(BaseModel):
    """
    Model to describe a single field in a MessageConfiguration.

    This is analagous to a single PayloadField in the same way that a MessageConfiguration is
    analagous to a single Message.
    """

    name: str
    units: str | None
    enabled: bool


class Message(BaseModel):
    """
    Model to describe WebSocket messages, which consist of a Header and a Payload.

    Right now payloads are just a list of measurement values which... hopefully can represent a
    pretty wide array of messages, but maybe this will change in the future.
    """

    header: Header

    payload: List[PayloadField]


class MessageConfiguration(BaseModel):
    """
    Model to describe the data sources used in a particular component.

    This is "necessary" since components on the frontend can use certain fields from messages.
    """

    header: Header

    # bruh
    payload: List[FieldConfiguration]
