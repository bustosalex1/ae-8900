#+title: AE 8900 Notes
#+author: Alexander Bustos

** Week 0, 5/15/2023 - 5/21/2023
   This week I discussed and decided on a project topic with Dr. Gunter. The project title is 
    *A Low-Cost Data Acquisition, Visualization, and Test Management Platform for CubeSat Subsystems.*

** Week 1, 5/22/2023 - 5/28/2023
   This week I researched and decided on the software technology stack that I intend on using for
   the project. The key technologies I will be using are described below, as well as some
   rationale.
*** Frontend
**** SvelteKit and Svelte
     I've definitely enjoyed using Svelte a lot more than React. I would say the two main reasons I
     selected Svelte as the component framework for this project are its reactivity model, which I
     think will make working with a lot of data and chart components easier, and the nice built in
     features in SvelteKit that improve developer experience, like path aliases and file system
     routing.

**** TailwindCSS + DaisyUI
     For styling UI components I will be using TailwindCSS and DaisyUI, partially because I would
     like to leverage some experience I already have with these tools, and because outside of some
     data visualization, I don't think I will need a lot of crazy UI components that might warrant a
     heavier solution like MUI.

**** Apache ECharts
     Data visualization is a core component of my project. Instead of using a low level tool like
     ~d3.js~, which I have some experience with, I have decided to give Apache ECharts a try because
     it comes with a wide array of pre-built data visualization tools, supports HTML Canvas
     rendering for larger graphs, and has good support for visualizing real time data.
     [[https://www.youtube.com/watch?v=oA3MDCxNpFU][This]] video helped highlight some of the
     tradeoffs between ~d3.js~ and ECharts for me.

*** Backend
**** FastAPI
     I have decided to use FastAPI as the web server framework to power the project backend. In the
     past I have tried Django and Flask, and although Django's ORM is very nice, I think that it
     might be a bit overkill for this application. I also like that FastAPI adheres to the OpenAPI
     spec, and can be used (I think?) to generate API stubs in other languages, which could help
     with avoiding code duplication. 

** Week 2, 5/29/2023 - 6/4/2023
   This week I spent some time setting up project structures and environments and getting a git repo
   setup for the project. The frontend was pretty straightforward to setup, I just used
   #+begin_src bash
   npm create svelte@latest
   #+end_src
   to scaffold a SvelteKit project with pretty standard tooling: TypeScript, Prettier, etc. I also
   decided to try out ~pnpm~ instead of ~yarn~ or ~npm~, which has been good so far. Honestly I
   don't know enough about software development to really appreciate why ~pnpm~ is "better" than the
   alternatives, but it seems like it's what all the cool people are using.

   For the backend I am also trying something new with ~venv~ instead of what I usually use for
   virtual environments, which is ~conda~. I figured that since I am working in a pure Python
   backend, I should maybe try it out and see if it is a reasonable alternative to ~conda~. I
   always felt weird using two package managers anyways.

   I also flashed the Raspberry Pi SD card with Raspberry Pi OS Lite.

** Week 3, 6/5/2023 - 6/11/2023
*** Meeting with Dr. Gunter
    This week I met with Dr. Gunter to discuss the state of my project so far. We met on 6/08/2023.
    Some meeting notes are below:
    - Dr. Gunter's lab is starting to produce a number of custom EPS boards for an undergraduate
      class coming up in the fall, and it would be cool to be able to test them with this project.
      This would be useful in helping to deliver the EPS boards and also serve as a real
      demonstration of project capabilities.
    - The timeline for the above would start around July, so it would be necessary to have basic
      functionality across the software stack operational by then.
    - It would be cool to open source the project to share with the CubeSat community, and
      potentially work on it as a journal paper.
    - In general, the only requirement for configuring the project system to test something should be
      an ICD or API.

*** Other Notes
    This week I really started building out the foundation of the application. I spent a decent
    amount of time on the basics of the frontend, trying to make it pretty flexible to support
    different layouts and dashboard styles. I experimented some with ECharts, and basically got to
    the point where I am able to stream random data from the backend to the frontend over a
    WebSocket, and have a line chart update in real time with data from the backend.

** Week 4, 6/12/2023 - 6/18/2023
*** 6/12/2023 Notes
    Last week was pretty solid in terms of getting a lot of stuff scaffolded and prototyped, and I
    would like to keep that up this week. Here are some priorities I would like to focus on.
**** TODO Complete Dynamic Component Rendering Scheme
     Last week I worked out the general scheme by which components can be dynamically rendered, and
     also worked out how I can automatically generate a string to component mapping of all the
     dashboard components that can be rendered. I would like to use this map to make it so that a
     user can select the type of new component they want when pressing the "+" button on a column on
     the frontend.
**** TODO Complete Basic Settings Panel
     I started working on a generic chart settings panel that can be accessed on any chart component
     when you click the edit button on the top right of an expanded chart component. Right now this
     doesn't do anything and doesn't include really substantial settings. I would like to build this
     out so that:
     a. changes made on the settings panel are actually stored in the project state and propagate
     through to the corresponding dashboard component
     b. the available settings are actually applicable to the component they are on
**** TODO Start Building Out WebSocket Receiver
     Last week I did some very basic stuff with streaming data via a WebSocket from the backend to
     the frontend. I think that this scheme will work well for providing data to the various graphs
     on the frontend, and I would like to accomplish this using Svelte stores that are managed by a
     sort of connection manager entity that basically sorts incoming data into different stores that
     different graphs can subscribe / unsubscribe to.
**** TODO Try out OpenAPI Generation Tools
     It seems like I should be able to use some of the OpenAPI generation tools out there to
     automatically make some API stubs for the frontend for the backend API. I would like to try
     this out and investigate its feasibility.
